---
title: "C_Plotting group UDs"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---


### Load the packages

```{r}
#| output: false
load("processed_data/ud_df.RData")
packages <- read.csv("packages.csv")$packages
invisible(lapply(packages, library, character.only = TRUE))
```

### Load data if not already in the workspace

Adjust the names of the files in below chunk based on what was created/saved in previous steps

```{r}
#| output: false
load("processed_data/ud_df.RData")
ud_df <- ud_df %>% select(-data)

load("processed_data/predict_samples.RData")

meta_data <- read_csv("raw_data/Metadata.csv",show_col_types = FALSE) %>% 
  clean_names() %>% 
  rename(deploy_id = ptt_unique_id) %>% 
  mutate(
    deploy_date = mdy(deploy_date)
    )

meta_data <- meta_data %>% filter(deploy_id %in% ud_df$deploy_id)

ud_data <- select(ud_df, deploy_id, ess, area95, area50, ud_full, ud_95, ud_50)
```

### Capture location spatial points

```{r}
capt_loc <- meta_data %>% select(deploy_id, capture_longitude, capture_latitude) %>% 
  st_as_sf(coords = c("capture_longitude","capture_latitude"), crs=4326)
capt_loc <- st_transform(capt_loc, st_crs(land))
```

### Define Species tag groups

```{r}
meta_data$tag_type <- str_replace(meta_data$tag_brand_type, " Wildlife Computers", "")
meta_data$spp_tag <- paste(meta_data$species, meta_data$tag_type, sep = " / ") 
```

### Get Bathymetry rasters for plotting

```{r}
library(rosm)
locs_bbox <- st_expand(st_bbox(land), 0.2) %>% st_as_sfc()
esri_ocean <- source_from_url_format(
  url_format = paste0('https://services.arcgisonline.com/arcgis/rest/services/',
                      'Ocean/World_Ocean_Base/MapServer/tile/${z}/${y}/${x}.jpeg'),
  attribution = "")

esri_tiles <- osm.raster(sf::as_Spatial(locs_bbox),
                         type = esri_ocean, zoomin = 2,
                         progress = "none", crop = FALSE)
esri_tiles <- terra::rast(esri_tiles)
terra::crs(esri_tiles) <- "EPSG:6637"
```

### Create directory for group UDs

```{r}
if(!dir.exists("plots/group_uds")){dir.create("plots/group_uds")}

```

## Group specific code starts here:

Define a group here. To change group variable, replace `"general_location"` with desired grouping variable

```{r}
GROUP_VAR <- "general_location"

plot_dir <- paste0("plots/group_uds/", GROUP_VAR, "/")
dir.create(plot_dir)

file_dir <- paste0("group_ud_files/", GROUP_VAR, "/")
dir.create(file_dir, recursive=TRUE)
dir.create(paste0(file_dir, "ud_full"))
dir.create(paste0(file_dir, "ud_95"))
dir.create(paste0(file_dir, "ud_50"))
```

### Splitting by species (and by tag type if desired)

If you want to separate UDs by species only (Not by tag type, i.e., SPLASH vs SPOT), you would use the following code `ud_group_df <- ud_data %>% group_by(.data[[GROUP_VAR]], species) %>% ...` but here we will group by `"general_location"`, species and tag type with the following code. You can also adjust the grouping to whatever you would like for the maps. 

```{r}
ud_group_df <- meta_data %>% group_by(.data[[GROUP_VAR]], species, tag_type) %>% nest() %>% 
 arrange( species, tag_type, .data[[GROUP_VAR]]) %>% 
 mutate(area95 = NA, area50 = NA, ud_full=NA, ud_95=NA, ud_50=NA) 

 locs_group <- ud_data %>% select(deploy_id, .data[[GROUP_VAR]], species, tag_type, data) %>% group_by(.data[[GROUP_VAR]], species, tag_type) %>% nest() %>% 
 arrange( species, tag_type, .data[[GROUP_VAR]])
```


### Helper function to calculate area

This function will calculate the area of a homerange estimate
```{r}
ud_area <- function(x){
  x |> st_geometry() |> st_union() |> st_area() |> set_units("km^2")
}
```



### Loop over by groups

```{r}
with_progress({ # Takes a while, so adding progress bar
  G <- nrow(ud_group_df)
  p <- progressor(G)
  for(g in 1:G){
    grp_lvl <-  paste(as.vector(ungroup(select(ud_group_df, -data, -area95, -area50, -ud_full, -ud_95, -ud_50)[g,])[1,]), collapse="_") %>% 
      gsub("\\/", "-", .)
    g_id <- ud_group_df$data[[g]]$deploy_id
    g_locs <- locs_sample %>% filter(deploy_id %in% g_id) %>% pull(sample)
    N <- length(g_locs)
    ud_95_files <- ud_df %>% filter(deploy_id %in% g_id) %>% pull(ud_95)
    ud_lst <- foreach(i=1:N)%do%{
      readRDS(ud_95_files[[i]]) %>% st_geometry %>% st_union
    }
    bb <- lapply(g_locs, st_bbox_list) %>% lapply(st_as_sfc) %>% st_bbox_list %>% 
      st_as_sfc %>% st_buffer(20000) 
    grd1 <- cu_ud_grid(bb, n=c(15,15))
    ud1 <- foreach(i=1:N)%do%{
      tmp <- cu_empirical_ud(g_locs[[i]], grid=grd1)
      tmp$ud <- tmp$mean_pts/sum(tmp$mean_pts)
      attr(tmp, "is_ud") <- TRUE
      tmp2 <- cu_hud(tmp, 0.95)
      if(nrow(tmp2)==0){
        tmp <- tmp[tmp$ud!=0, ]
      } else{
        tmp <- tmp2
      }
      tmp
    }
    
    grd2 <- st_bbox_list(ud1) %>% st_as_sfc %>% st_buffer(2000) %>% 
      cu_ud_grid(barrier=land, cellsize=100)
    
    # plan("multisession", workers=7) # uncomment for parallel processing
    ud2 <- foreach(j=1:N, .packages=c("sf","dplyr")) %do% {
      cu_kde_ud_sample(g_locs[[j]][1:8], grd2)
    }
    
    ud <- cu_avg_ud(ud2, w="ess")
    ud_cont <- cu_ud_contour(ud, c(0.95,0.5))
    ud_cont_poly <- ud_cont %>% st_cast("POLYGON")
    # ud %>% cu_hud() %>% mapview(zcol='ud')
    
    # Save UD data and create 95% and 50% UD quantiles
    ud_group_df$ud_full[g] <- paste0(file_dir,"ud_full/",grp_lvl,".rds")
    saveRDS(ud, file=ud_group_df$ud_full[g])
    
    ud95 <- cu_hud(ud, 0.95)
    ud_group_df$area95[[g]] <- ud_area(ud95)
    ud_group_df$ud_95[g] <- paste0(file_dir,"ud_95/",grp_lvl,".rds")
    saveRDS(ud95, file=ud_group_df$ud_95[g])
    
    ud50 <- cu_hud(ud, 0.50)
    ud_group_df$area50[[g]] <- ud_area(ud50)
    ud_group_df$ud_50[g] <- paste0(file_dir,"ud_50/",grp_lvl,".rds")
    saveRDS(ud50, file=ud_group_df$ud_50[g])
    
    pts <- locs_group$data[[g]]$data %>% do.call(bind_rows,.) %>% 
      select(ptt) %>% mutate(ptt = factor(ptt))
    n_anim <- nrow(locs_group$data[[g]])
    
    ## Capture locs - Gaos: grey these out and the capt line furhter down to eliminate capture locations
    capt_pts <- capt_loc %>% filter(deploy_id %in% locs_group$data[[g]]$deploy_id)
    capt_pts$deploy_id <- factor(capt_pts$deploy_id)
    
    # Plots
    bbb <- st_buffer(ud95, 1500) |> st_bbox() |> st_as_sfc()
    
    ###
    ### See http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
    ### if you want to change homerange colors and 
    ### https://colorbrewer2.org/ for the PTT color palette
    ###
    
    #ptt_palatte <- colorRampPalette(brewer.pal(8, "Set2")) # original palette for any number of animals
    #ptt_palatte <- colorRampPalette(gray(c(0.2,0.8))) # a gray scale palette
    
    ppp <- ggplot() +
      annotation_spatial(esri_tiles) + 
      layer_spatial(bbb, fill=NA, size=0, color=NA) +
      #Devin original code: 
      #annotation_spatial(pts, aes(color=ptt), size=0.25, alpha=1) +
  
  #Gaos: 
  # all black. Grey out palatte lines above, as well as annotation line above, and use this: 
  annotation_spatial(pts, color = "black", size=0.25, alpha=0.05) + 
      
      scale_color_manual(values=ptt_palatte(n_anim)) +                # ptt colors
      guides(color = guide_legend(override.aes = list(size = 2))) +
      labs(color = "PTT") + 
      # layer_spatial(ud_cont[1,], color="royalblue4", lwd=0.75) +      # 95% quantile
      # layer_spatial(ud_cont_pol[2,], color="gold", lwd=0.75) +            # 50% quantile
      layer_spatial(ud_cont_poly[1,], color="royalblue", lwd=0.25, fill="royalblue", alpha=0.3) +      # 95% quantile polygon
      layer_spatial(ud_cont_poly[2,], color="firebrick2", lwd=0.25, fill="firebrick2", alpha=0.3) +    # 50% quantile polygon
      annotation_spatial(land, fill = "gray50", size = 0) +           # land
      layer_spatial(capt_pts, size=2, alpha=1, color="black", shape=3) + # capture locations see http://www.sthda.com/english/wiki/ggplot2-point-shapes to change shape
      theme_bw() + theme(panel.grid.major = element_blank(), 
                         panel.grid.minor = element_blank(),
                         axis.ticks=element_blank(), axis.text=element_blank()) +
      annotation_scale()
    ggsave(ppp, file=paste0(plot_dir, grp_lvl,".png"), width=6.5, height=4)
    
    p()
    
  } # Group loop end
})
```

### Save output

```{r}
save(ud_group_df, land, file="processed_data/ud_group_df_NavyMarianas.RData")
```

### Write out ud_group_df as a csv so it will give all the UD area info

```{r}
ud_group_df %>% select(-data) %>% write_csv("processed_data/ud_group_df_nodata.csv")
```
