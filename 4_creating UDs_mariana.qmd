---
title: "Step 4 - Create Individual UDs"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

### Read in saved data and load packages
If you previously stopped after step 3 and want to restart, you have to read in the saved data and load all the packages.

```{r}
load("processed_data/pred_sample_mariana.RData")
packages <- read.csv("packages.csv")$packages
invisible(lapply(packages, library, character.only = TRUE))
```

## Create Individual UDs

### Function to find area of HPD UD

This function will calculate the area of a homerange estimate
```{r}
ud_area <- function(x){
  x |> st_geometry() |> st_union() |> st_area() |> set_units("km^2")
}
```

### Unnest location data to get grouping variables
Currently, the only grouping variable for the location data `deploy_id`. In order to extract data in each deployment we will unnest the data and regroup with the other desired variables. 
```{r}
#| output: false
locs_mariana <- unnest(locs_mariana, cols=data) %>% 
  group_by(
    deploy_id, species, scl, general_location, site_location, release_location, sex
  ) %>% nest() %>% ungroup()
```

Next we will calculate the effective sample size for each data set. This step attempts to mediate the autocorrelation when estimating the UDs.
```{r}
ess_mariana <- locs_mariana %>% select(deploy_id)
ess_mariana$ess <- sapply(fit_mariana$fit, cu_crw_ess)
```


### Create UDs (Full, 95% and 50%)

[ARG: I'm not clear if all the code below needs to be in a single chunk or if it can be broken up.]{.underline}

Next we create a dataframe to store the information about the individual UDs in an organized way and create directories to store the data and plots.
```{r}
ud_df <- full_join(locs_mariana, ess_mariana, by='deploy_id') 

dir.create("ud_files/ud_full", recursive=TRUE)
dir.create("plots/individual_uds", recursive=TRUE)
```

Now we calculate individual UDs. This can also take a while, so we can do it in parallel

```{r}
plan("multisession", workers=4)

ud_out <- foreach(i=1:4, .options.future=list(seed=TRUE), .errorhandling="pass", .combine="bind_rows") %dofuture% {
  
  # Create indiv. grids and UDs for animal i
  idata <- locs_mariana$data[[i]]
  xy <- st_coordinates(idata)
  bw <- sqrt(diag(var(xy)))
  
  sig <- var(xy)
  bb <- st_bbox_list(sample_mariana$sample[[i]]) %>%  st_as_sfc() |> st_buffer(2000) %>%  
    st_bbox()
  # grd <- cu_ud_grid(bb, cellsize=100)
  grd <- rast(st_as_sfc(bb) %>% vect(), res=50)
  ud <- cu_sf_kde(sample_mariana$sample[[i]][[1]], ref=grd)
  
  # ud <- cu_kde_ud_sample(sample_mariana$sample[[i]], grid=grd, ess=ess_mariana$ess[[i]])
  
  # Save UD data and create 95% and 50% UD quantiles
  ud_full_path <- paste0("ud_files/",sample_mariana$deploy_id[[i]],".rds")
  saveRDS(ud, file=ud_full_path)
  
  # cnt <- cu_ud_contour(ud)
  
  ud_cont <- ud %>% cu_ud_contour(c(0.5,0.95)) %>% st_difference(st_union(mariana))
  ud_cont$area <- st_area(ud_cont) %>% set_units("km^2")
  
  tibble(
    deploy_id=sample_mariana$deploy_id[[i]], ud_full=ud_full_path, contours=list(ud_cont)
  )
}  

plan("sequential")

ud_df <- full_join(ud_df, ud_out, by="deploy_id")
```

### Save UD areas (km2) to external files

```{r}
ud_df %>% select(-data) %>% write_csv("processed_data/ud_df_nodata.csv")

```

### Save UDs to external files

Change the end of the file name as appropriate

```{r}
save(ud_df, land, packages, file="processed_data/ud_df.RData")
```
