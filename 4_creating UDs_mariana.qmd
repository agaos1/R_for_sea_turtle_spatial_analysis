---
title: "Step 4 - Create Individual UDs"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

### Read in saved data and load packages
If you previously stopped after step 3 and want to restart, you have to read in the saved data and load all the packages.

```{r}
load("processed_data/pred_sample_mariana.RData")
packages <- read.csv("packages.csv")$packages
invisible(lapply(packages, library, character.only = TRUE))
```

## Create Individual UDs

### Function to find area of HPD UD

This function will calculate the area of a homerange estimate
```{r}
ud_area <- function(x){
  x |> st_geometry() |> st_union() |> st_area() |> set_units("km^2")
}
```

### Unnest location data to get grouping variables
Currently, the only grouping variable for the location data `deploy_id`. In order to extract data in each deployment we will unnest the data and regroup with the other desired variables. 
```{r}
#| output: false
locs_mariana <- unnest(locs_mariana, cols=data) %>% 
  group_by(
    deploy_id, species, scl, general_location, site_location, release_location, sex
  ) %>% nest() %>% ungroup()
```

Next we will calculate the effective sample size for each data set. This step attempts to mediate the autocorrelation when estimating the UDs.
```{r}
ess_mariana <- locs_mariana %>% dplyr::select(deploy_id)
ess_mariana$ess <- sapply(fit_mariana$fit, cu_crw_ess)
```


### Create UDs (Full, 95% and 50%)

[ARG: I'm not clear if all the code below needs to be in a single chunk or if it can be broken up.]{.underline}

Next we create a dataframe to store the information about the individual UDs in an organized way and create directories to store the data and plots.
```{r}
ud_df <- full_join(locs_mariana, ess_mariana, by='deploy_id') %>% dplyr::select(-data) 

dir.create("ud_files/mariana", recursive=TRUE)
dir.create("plots/individual_uds/mariana", recursive=TRUE)
```

Now we calculate individual UDs. This can also take a while, so we can do it in parallel

```{r}
# plan("multisession", workers=4)

ud_out <- foreach(i=1:nrow(pred_mariana), 
                  .errorhandling="pass", .combine="bind_rows") %do% {
  # Create indiv. grids and UDs for animal i
  # ipred <- cu_crw_predict(fit_mariana$fit[[i]])
  ipred <- pred_mariana$pred[[i]]
  bb <- st_bbox(ipred) %>%  st_as_sfc() |> st_buffer(5000) 
  # grd <- cu_ud_grid(bb, cellsize=100)
  grd <- rast(vect(bb), res=50) %>%  terra::rasterize(vect(mariana), ., cover=TRUE, background=0)
  grd <- ifel(grd>0.99, NA, 1)
  bw <- min(bw_silver(st_coordinates(ipred), ess=ess_mariana$ess[[i]]))
  ud <- cu_sf_kde(x=ipred, ref=grd, bw=bw, mask=TRUE)
  # Save UD data and create 95% and 50% UD quantiles
  cont <- cu_ud_contour(ud, c(0.9, .5))   
  cont$area <- st_area(cont) %>% set_units("km^2")
  ud_path <- paste0("ud_files/mariana/",pred_mariana$deploy_id[[i]],".rds")
  ud <- terra::wrap(ud)
  saveRDS(ud, file=ud_path)
  
  tibble(
    deploy_id=pred_mariana$deploy_id[[i]], ud_full=ud_path, contours=list(cont)
  )
}  

ud_out <- ud_out %>% unnest(cols = contours)
ud_df <- full_join(ud_df, ud_out, by="deploy_id")%>% st_as_sf()
```

### Save UD areas (km2) to external files

```{r}
ud_df %>% st_drop_geometry() %>% write_csv("processed_data/ud_df.csv")
```

### Save UDs to external files

Change the end of the file name as appropriate

```{r}
save(ud_df, mariana, file="processed_data/ud_df.RData")
```
