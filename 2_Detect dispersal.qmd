---
title: "Step 2 - Detect dispersal"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

## Detect dispersal from tagging release location and separating locations by date or movement phase

### Read in save data
If you previously stopped after step 2 and want to restart, you have to read in the saved data and load all the packages.

```{r}
#| output: false
load("processed_data/clean_data.RData")
packages <- read.csv("packages.csv")$packages
invisible(lapply(packages, library, character.only = TRUE))
```

The remainder of the functions only work on data sets of single deployments. So we first nest the data such that each row represents a single deployment.

```{r}
locs <- locs %>% group_by(deploy_id) %>% nest()
```


### Create table of migration start and stop dates

First we will check if some animals have already been processed. This is indicated by the presence of the `stat_travel.csv` file in the `processed_data` directory. 
```{r}
if(file.exists("processed_data/stat_travel.csv")){
  stat_travel <- read_csv("processed_data/stat_travel.csv") %>% 
    group_by(deploy_id) %>% nest() %>% 
    mutate(complete = 1)
  stat_travel <- bind_rows(data.frame(deploy_id = locs$deploy_id[!locs$deploy_id%in%stat_travel$deploy_id]))
} else{
  stat_travel <- NULL
  skip <- NULL
}
new_id <- c(1:nrow(locs))[!locs$deploy_id %in% skip]
```

Now we can estimate migration start and stop dates, if there are any, in each deployment. The workhorse function for this is `cu_migration_det()`. The arguments used here are `min_disp`, the minimum distance that can be considered a migration displacement, `min_phase_len`, the minimum number of days a phase (stationary or migration) can be, and `max_k` is the degrees of freedom used for fitting the dispersion function. 

```{r}
#| output: false
migr_tbl <- foreach(i=new_id) %do% {
  cu_migration_det(locs$data[[i]], min_disp=20, min_bout_len=3)
}
```

Now we export the best guess at the movement bouts. Then after plotting we can adjust the bout timing. We also add an initial guess about bouts that are actual migrations not just movement between stationary areas. 

```{r}
new_stat_travel <- tibble(deploy_id=locs$deploy_id[new_id], migr_tbl = migr_tbl) %>%
  unnest(cols=migr_tbl) %>% mutate(
    migration = ifelse(avg_disp_rate>=set_units(10,km/d), 1, 0),
    start = as.character(start), end = as.character(end)
  ) %>% select(-avg_disp_rate)

stat_travel <- bind_rows(stat_travel, new_stat_travel) %>% arrange(deploy_id)

write_csv(stat_travel, "processed_data/stat_travel.csv")

```

### Create dispersal plots for each animal

```{r}
#| output: false
dispersal_plt <- foreach(i=1:length(new_id)) %do% {
  {cu_plot_disp(locs$data[[new_id[i]]], migr_tbl[[i]]) + ggtitle(paste0("ID:",locs$deploy_id[[new_id[i]]]))} %>% ggplotly()
}
```

### Adjust `stat_travel.csv` file based on plots



In the `migr_tbl` entries, for the `travel_evt`:
0 = stationary bout(s)
1 = travel (may or may not be full migration)

After looking through the plots of all animals you may way to examine some more closely and change the dates for migration, etc. Or, you may want to delete some locations. First let's look at PTT 178536 (row 19).It looks like the animal started departing for migration sooner than the `cu_migration_det()` function detected it. So we use the `plotly` package to create an interactive plot so that we can get the dates that we want.

If you hover over the points you will see that it looks like the animal began migration on August 23 rather than 25 as detected by the function. So we can change the date in the migration table then re-plot it. 


If you want, you can just manually adjust the values in the `migr_tbl` list like so:
```{r}
#| eval: false
migr_tbl[[37]][1,]$end <- mdy("8/23/2022")
migr_tbl[[37]][2,]$start <- mdy("8/23/2022")
```

Now, if we look at PTT 171222 (row 10) we can see that there are some irregularities with the data that we should remove after October 2017. So we can follow the same procedure


## Join locations to movement phases for individual turtles

If the migration phases are acceptable we can combine the phase information with the data to select the data we want in future analyses, e.g., remove nonmigratory data for space use analysis. 
```{r}
locs <- locs %>% rowwise() %>% mutate(
data = list(cu_join_interval_tbl(data, migr_tbl))
)
```

### Save output for continuing later
If you would would like to pause here and continue working later you should save the products so you don't have to repeat these steps.
```{r}
save(locs, file="processed_data/migr_det_data.RData")
```
Otherwise, you can continue with step 2 without saving.