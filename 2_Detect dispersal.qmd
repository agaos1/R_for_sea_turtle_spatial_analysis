---
title: "Step 2 - Detect dispersal"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

## Detect dispersal from tagging release location and separating locations by date or movement phase

### Read in save data
If you previously stopped after step 2 and want to restart, you have to read in the saved data and load all the packages.

```{r}
#| output: false
load("processed_data/clean_data.RData")
packages <- read.csv("packages.csv")$packages
invisible(lapply(packages, library, character.only = TRUE))
```

The remainder of the functions only work on data sets of single deployments. So we first nest the data such that each row represents a single deployment.

```{r}
locs <- locs %>% group_by(deploy_id) %>% nest()
```


### Create table of migration start and stop dates

Now we can estimate migration start and stop dates, if there are any, in each deployment. The workhorse function for this is `cu_bout_det()`. The arguments used here are `min_disp`, the minimum distance that can be considered a migration displacement, `min_bout_len`, the minimum number of days a phase (stationary or migration) can be, and `max_k` is the degrees of freedom used for fitting the dispersion function. The higher `max_k` is, the finer grained the guess will be, i.e., it may not overshoot the start or the end of a bout as much. The default is `max_k = 100`

```{r}
#| output: false
stat_travel <- tibble(deploy_id = locs$deploy_id)
stat_travel$bout_tbl <- foreach(i=1:nrow(locs)) %do% {
  cu_bout_det(locs$data[[i]], min_disp=20, min_bout_len=3)
}
```

Now we can make some plots to examine the accuracy of the bout start and end dates.

```{r}
#| output: false
dispersal_plt <- foreach(i=1:nrow(stat_travel)) %do% {
  {cu_plot_disp(locs$data[[i]], stat_travel$bout_tbl[[i]]) + ggtitle(paste0("ID:",locs$deploy_id[[i]], " / row: ", i))} %>% ggplotly()
}
```




### Adjust `stat_travel.csv` file based on plots

Next we will export the data to a new  `stat_travel.csv` file so that we can adjust the start and end times for the new animal bouts as necessary.  

```{r}
dispersal_plt
```

Upon examining the last plot, `dispersal_plt[[27]]`, for example we can see that the migration period lasts a little to long and should probably end on 11/4/2023. Looking that the bout table for that animal,
```{r}
stat_travel$bout_tbl[[27]]
```
we can see that the auto detection function has the migration bout ending on 11/9/2023. We can simply change the start date of the next bout (bout number 2) to the appropriate value,
```{r}
stat_travel$bout_tbl[[27]]$start[2] <- as.Date("2023-11-04")
```
The last line of the bout table is the day after the last telemetry observation is observed. If you want to delete some data at the end, all you have to do is adjust that last `start` date. Now after examinging all the plots, we will make the following adjustments:
```{r}
# Animal 24
stat_travel$bout_tbl[[24]]$start[2] <- as.Date("2023-08-27")
stat_travel$bout_tbl[[24]]$start[3] <- as.Date("2023-10-17")
## Animal 23
stat_travel$bout_tbl[[23]]$start[2] <- as.Date("2023-09-24")
## Animal 22
stat_travel$bout_tbl[[22]]$start[2] <- as.Date("2022-05-31")
stat_travel$bout_tbl[[22]]$start[3] <- as.Date("2022-06-03")
stat_travel$bout_tbl[[22]]$start[4] <- as.Date("2022-07-11")
## Animal 21
stat_travel$bout_tbl[[21]]$travel[1] <- 1
stat_travel$bout_tbl[[21]] <- stat_travel$bout_tbl[[21]][-2,]
stat_travel$bout_tbl[[21]]$start[[2]] <- as.Date("2019-10-10")
stat_travel$bout_tbl[[21]]$start[[3]] <- as.Date("2019-10-31")
stat_travel$bout_tbl[[21]]$bout[1:4] <- 1:4
## Animal 18
stat_travel$bout_tbl[[18]]$start[[2]] <- as.Date("2019-07-23")
## Animal 15
stat_travel$bout_tbl[[15]]$travel[[1]] <- 0
stat_travel$bout_tbl[[15]]$start[[1]] <- as.Date("2019-06-10")
## Animal 14
stat_travel$bout_tbl[[14]]$start[[2]] <- as.Date("2019-06-07")
## Animal 11
stat_travel$bout_tbl[[11]] <- stat_travel$bout_tbl[[11]][-1,]
stat_travel$bout_tbl[[11]]$start[[1]] <- as.Date("2017-05-23")
stat_travel$bout_tbl[[11]]$bout[[1]] <- 1
## Animal 10
stat_travel$bout_tbl[[10]] <- stat_travel$bout_tbl[[10]][-2,]
stat_travel$bout_tbl[[10]]$start[[2]] <- as.Date("2017-10-11")
## Animal 7
stat_travel$bout_tbl[[7]]$start[2] <- as.Date("2017-09-09")
## Animal 6
stat_travel$bout_tbl[[6]]$start[2] <- as.Date("2019-06-09")
## Animal 5
stat_travel$bout_tbl[[5]]$start[2] <- as.Date("2019-03-09")
## Animal 4
stat_travel$bout_tbl[[4]] <- stat_travel$bout_tbl[[4]][-4,]
stat_travel$bout_tbl[[4]]$start[2] <- as.Date("2016-08-24")
stat_travel$bout_tbl[[4]]$start[3] <- as.Date("2016-10-09")
## Animal 2
stat_travel$bout_tbl[[2]] <- stat_travel$bout_tbl[[2]][-c(6:7),] 
stat_travel$bout_tbl[[2]]$start[5] <- as.Date("2016-09-17")
stat_travel$bout_tbl[[2]]$start[6] <- as.Date("2016-10-25")
stat_travel$bout_tbl[[2]]$start[7] <- as.Date("2016-10-26")
## Animal 1
stat_travel$bout_tbl[[1]]$start[2] <- as.Date("2015-04-21")
stat_travel$bout_tbl[[1]]$start[3] <- as.Date("2015-07-03")
```

Just to check we can re-plot the dispersion figures.

```{r}
#| output: false
dispersal_plt <- foreach(i=1:nrow(stat_travel)) %do% {
  {cu_plot_disp(locs$data[[i]], stat_travel$bout_tbl[[i]]) + ggtitle(paste0("ID:",locs$deploy_id[[i]], " / row: ", i))} %>% ggplotly()
}

dispersal_plt 
```


### Save output for continuing later
If you would would like to pause here and continue working later you should save the products so you don't have to repeat these steps.
```{r}
save(stat_travel, file="processed_data/stat_travel.RData")
```
Otherwise, you can continue with step 2 without saving.